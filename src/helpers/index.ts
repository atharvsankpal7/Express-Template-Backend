/**
 * Creates an HMAC (Hash-based Message Authentication Code) using the SHA-256 hashing algorithm.
 * The salt and password are combined with a '/' separator and used as the key for the HMAC.
 * The HMAC is then updated with the SECRET key and the final hash is generated as a hexadecimal string.
 *
 * @param {string} salt - The salt value to be used in the HMAC key.
 * @param {string} password - The password value to be used in the HMAC key.
 * @returns {string} The HMAC hash as a hexadecimal string.
 */

/**
 * Generates 128 random bytes using a cryptographic pseudorandom number generator.
 * The generated bytes are then converted into a base64-encoded string.
 *
 * @returns {string} The base64-encoded string of 128 random bytes.
 */
import crypto from "crypto";

const SECRET = "RAM-REST-API";
//creates an HMAC (Hash-based Message Authentication Code) object using the SHA-256
// hashing algorithm. The salt and password are combined with a '/' separator and used as the key for the HMAC
export const authentication = (salt: string, password: string) => {
  return crypto
    .createHmac("sha256", [salt, password].join("/"))
    .update(SECRET)
    .digest("hex");
};

// performing authentication using cryptographic operations
export const random = () => crypto.randomBytes(128).toString("base64"); // generates 128 random bytes using a cryptographic pseudorandom number generator, converts the generated bytes into a base64-encoded string.

//Note:
//.update(SECRET) updates the HMAC with the SECRET key.
//.digest('hex') generates the HMAC's hash as a hexadecimal string.
